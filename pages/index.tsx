import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import NASAImage from '../components/image'
import styles from '../styles/Home.module.css'
import React, {useEffect, useState, useRef} from "react"
import getNasaImages from './api/api'
import Filter from '../components/filter'
import FilterLoadingRow from '../components/loading/filterLoadingRow'
import ImageLoadingRow from '../components/loading/imageLoadingRow'
import ImageSkeleton from '../components/loading/imageSkeleton'


const Home: NextPage = () => {
  let IMG_PER_RENDER = 48
  // state variables
  const [imageList, setImageList] = useState([] as any[])
  const imageRef = useRef([] as any[])
  const endOfList = useRef(IMG_PER_RENDER)
  const [scrollYOffset, setYScroll] = useState(0)
  const [isAtBottom, setBottom] = useState(false)

  useEffect(() => {
    // get images from API (populate imageRef)
    async function getData() {
      let curiosity: any = await getNasaImages("curiosity")
      let spirit: any = await getNasaImages("spirit")
      let opportunity: any = await getNasaImages("opportunity")
      if(curiosity != undefined && spirit != undefined && opportunity != undefined) {
        imageRef.current = [...spirit.photos, ...opportunity.photos, ...curiosity.photos]
        renderMoreImages(endOfList.current, imageRef.current)
      }
    }

    // call getData only on initial render
    if(imageRef.current.length == 0) {
      getData()
    }
  }, [])


  useEffect(() => {
    function updateCurrentWidth() {
      // update width everytime user scrolls
      setYScroll(window.scrollY)  
    }

    if(document.documentElement.offsetHeight < scrollYOffset + window.innerHeight && imageRef.current.length != 0) {
      // call this when the user reaches the bottom of the screen
      //setBottom(true)
      if(endOfList.current < imageRef.current.length) {
        endOfList.current += IMG_PER_RENDER
        renderMoreImages(endOfList.current, imageRef.current)
      }
    }

    if(document.documentElement.offsetHeight > scrollYOffset + window.innerHeight && imageRef.current.length != 0) {
      // this inverts the state if the user was at the bottom of the screen but isnt anymore
      //setBottom(false)
    }

    updateCurrentWidth()
    if (typeof window !== 'undefined') {
      [window.addEventListener('scroll', updateCurrentWidth)]
    }
  })

  // render images (update a portion of imageRef to imageList state)
  function renderMoreImages(endOfList: number, images: any) {
    console.log(images.length)
    // make sure not to index the list more than there are entries in the list
    let portion = JSON.parse(JSON.stringify(images)).slice(endOfList-IMG_PER_RENDER, endOfList)
    let updatedImageList = [...imageList, ...portion]
    setImageList(updatedImageList)
  }
  
  // error with api
  if (imageList == undefined) return <div></div>

  // still loading in data
  if (imageList.length == 0) {
    return (
      <main className={styles.mainLoading}>
        <FilterLoadingRow />  
        <ImageLoadingRow />
        <ImageLoadingRow />
      </main>
    )
  }

 /*  return (
    <main className={styles.mainLoading}>
      <FilterLoadingRow />  
      <ImageLoadingRow />
      <ImageLoadingRow />
    </main>
  ) */

  // data loaded
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div className={styles.filterContainer}>
          <div className={styles.filters}>
            <Filter img='radio' text='ALL ROVERS' />
            <Filter img='camera' text='ALL CAMERAS' />
            <Filter img='calendar' text='ALL DATES' />  
          </div>
          
        </div>
        <div className={styles.imageContainer}>
          {imageList.map((imageObj: any, index: number) => {
            //console.log('io', imageObj)
            return (
              <NASAImage key={index} date={imageObj.earth_date} imageLink={imageObj.img_src} name={imageObj.rover.name} camera={imageObj.camera.name}/>
            )
          })}
        </div>
      </main>

      <footer className={`${styles.loadingModal} ${styles.fadeIn}`}>
          <p className={styles.loadingText}>{endOfList.current > imageRef.current.length ? imageRef.current.length : endOfList.current} / {imageRef.current.length}</p>
        </footer>
    </div>
  )
}

export default Home
